function pgenerator = monteCarloGenerate(max_movement)
    global GoalState
    
    initialNode = NodeClass(GoalState);
    VisitedNodes = zeros(1,PuzzleSize*PuzzleSize);  % Hold the visited nodes to prevent loops in graph
    VisitedListPosition = 1;
    
    depth = 0;
    
    while depth < max_movement
        movement = randi(4); % Take randon integer between 1-4, each corresponds one direction
        Successors = successor_withoutHeuristic(Node);
        
        for i=1:length(Successors)
            next = Successors(movement); %take random movement
            
            %% If the node is not visited
            if(~ismember(Successors(i).State, VisitedNodes, 'rows'))
                VisitedNodes(VisitedListPosition,:)=Successors(i).State;
                VisitedListPosition = VisitedListPosition +1;
                depth = depth+1;
            end
        end
    end

    pgenerator = p1.state;
end %function end
