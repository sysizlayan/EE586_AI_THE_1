globals_3_3  % Initialize everything for the simulation

%% Generate Puzzles to be solved
monteCarloMatrix = NodeClass(GoalState);
monteCarloRow = [];
for movement = 1:MovementNumber
    monteCarloRow = [];
    for i = 1:MonteCarloNumber
        one_puzzle = monteCarloGenerate(movement);
        monteCarloRow = [monteCarloRow one_puzzle];
    end
    if(movement == 1)
        monteCarloMatrix = monteCarloRow;
    else
        monteCarloMatrix = [monteCarloMatrix;monteCarloRow];
    end
end

resultingElapsedTime = zeros(MovementNumber,MonteCarloNumber);
resultingVisitedNode = zeros(MovementNumber,MonteCarloNumber);
resultingTotalNode = zeros(MovementNumber,MonteCarloNumber);


for i = 1:MovementNumber
    for j = 1:MonteCarloNumber
        [ resultingElapsedTime(i,j), resultingVisitedNode(i,j), resultingTotalNode(i,j) ] = solve(monteCarloMatrix(i,j),'A_STAR','Manhattan',0);
    end
    display(i);
end
atafigure
title('A Star with Manhattan')
subplot(3,1,1)
bar3(resultingElapsedTime,'stacked');
zlabel('Elapsed Time(s)');
ylabel('Movement from goal state');

subplot(3,1,2)
bar3(resultingVisitedNode,'stacked');
zlabel('The number of Opened Nodes');
ylabel('Movement from goal state');

subplot(3,1,3)
bar3(resultingTotalNode,'stacked');
zlabel('Total Memory Consumption(Number)');
ylabel('Movement from goal state');



